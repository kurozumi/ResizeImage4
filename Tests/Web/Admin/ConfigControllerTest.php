<?php


namespace Plugin\ResizeImage4\Tests\Web\Admin;


use Eccube\Common\Constant;
use Eccube\Tests\Web\Admin\AbstractAdminWebTestCase;
use Symfony\Component\Filesystem\Filesystem;

class ConfigControllerTest extends AbstractAdminWebTestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $member = $this->createMember();
        $this->loginTo($member);
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testAmazonS3情報を保存したらenvファイルに追記されるか()
    {
        $envFile = self::$container->getParameter('kernel.project_dir') . '/.env';

        $fs = new Filesystem();
        $fs->copy($envFile, $envFile . '.backup');

        $this->client->request('POST', $this->generateUrl('admin_resize_image_config_aws'), [
            'amazon_s3' => [
                'enabled' => true,
                'access_key_id' => 'dummy',
                'secret_access_key' => 'dummy',
                'bucket' => 'dummy',
                'region' => 'dummy',
                'cache_control' => 1,
                Constant::TOKEN_NAME => 'dummy'
            ]
        ]);

        $env = file_get_contents($envFile);

        $keys = [
            'AWS_S3_ENABLED',
            'AWS_ACCESS_KEY_ID',
            'AWS_SECRET_ACCESS_KEY',
            'AWS_S3_BUCKET',
            'AWS_S3_REGION',
            'AWS_S3_CACHE_CONTROL'
        ];

        foreach($keys as $key) {
            $pattern = '/^(' . $key . ')=(.*)/m';
            if (preg_match($pattern, $env, $matches)) {
                switch ($key) {
                    case 'AWS_S3_ENABLED':
                    case 'AWS_S3_CACHE_CONTROL':
                        self::assertEquals(1, $matches[2]);
                        break;
                    default:
                        self::assertEquals('dummy', $matches[2]);

                }
            } else {
                self::fail(sprintf("%sが見つかりませんでした。", $key));
            }
        }

        $fs->rename($envFile . '.backup', $envFile, true);
    }
}
